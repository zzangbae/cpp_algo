#include<iostream>
#include<algorithm>

using namespace std;

/**
 * 정수 X
 * 1. 3으로 나누어떨어지면 3으로 나누기
 * 2. 2로 나누어떨어지면 2로 나누기
 * 3. 1을 빼기
 * N을 세개의 연산을 활용해서 1을 만들고자함
 * 연산을 사용하는 횟수의 최솟값
 * N은 1~1000000 : 100만까지
*/
int dp[1000005];   // 1. 테이블
int n;
int main() {
    cin >> n;
    // 1. 테이블 정의하기 : D[i] - i를 1로 만들기 위해 필요한 연산 사용횟수의 최솟값
    // 2. 점화식 찾기
    /**
     * D[12]?
     * 3으로 나누거나 (D[12] = D[4] + 1)
     * 2로 나누거나 (D[12] = D[6] + 1)
     * 1을 빼거나 (D[12] = D[11] + 1)
     * -> 즉, D[12] = min(D[4] + 1, D[6] + 1, D[11] + 1)
    */
    // 3. 초기값 D[1] = 0 : 매번 점화식이 돌아갈 수 있게 하기 위한 초기값
    dp[1] = 0;
    for(int i = 2; i <= n; i++) {
        // 6의 배수인 경우
        if(i % 6 == 0) dp[i] = min(dp[i / 3] + 1, min(dp[i/2] + 1, dp[i - 1] + 1));
        // 2의 배수인 경우
        else if(i % 2 == 0) dp[i] = min(dp[i / 2] + 1, dp[i - 1] + 1);
        // 3의 배수인 경우
        else if(i % 3 == 0) dp[i] = min(dp[i / 3] + 1, dp[i - 1] + 1);
        else dp[i] = dp[i - 1] + 1;
    }
    cout << dp[n];

    return 0;
}